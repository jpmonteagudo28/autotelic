---
title: "Chapters 1–4"
date: now
format:
  html:
    css: /learn/style.css
    code-fold: false
    code-tools: true
    code-overflow: wrap
    code-line-numbers: false
#doi: 10.59350/wx5k1-ajc38
citation: false
draft: true
haiku:
  - What's in a name?
  - That which we call a rose
  - by any other name would smell as sweet.
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.align = "center", fig.retina = 3,
                      fig.width = 5.5, fig.height = (5.5 * 0.618),
                      out.width = "90%", collapse = TRUE)
options(digits = 3, width = 300)

library(lobstr)

```

## What's in a name?

If you'd like to know your way around the programming environment, you first have to understand how R's OOP works. Binding is one of the most basic functions performed in `R`.So let's start there:

```{r}
x <- (1:6)
print(x)
```

This code is creating an object, a vector with 6 elements. This object is then bound to the name `x`. R assigns values to a name, and not vice-versa. The name is acts as a reference to the values 1 through 6. This concept is clearly demonstrated by binding the existing values in x to y. This action doesn't create a copy of `(1:6)`, but binds the values to a new name `y`. This doesn't mean that you won't see two names in your environment, instead, it shows that `y` is also referencing the sames values, `(1:6)`.

```{r}
y <- x
```

How do we know this? Well, we can access the object's identifier to make sure both `x` and `y` point to the same object `(1:6)`.

```{r}
print(lobstr::obj_addr(x))
print(lobstr::obj_addr(y))

## Another example of this behavior
print(lobstr::obj_addr(mean))
print(lobstr::obj_addr(base::mean))
print(lobstr::obj_addr(match.fun("mean")))
```

### Use syntactic names

The naming possibilities seem endless, but they're actually limited. Always use syntactic names that consists of letters, digits, `.` and `_`. You can't begin with `_` or a digit, and can't use any **reserved words** like `TRUE`, `FALSE`,`NULL`,`if`, and `function`^[Check out the complete list in `?Reserved`]. To override these rules, you have to surround the name in back–ticks. 

```{r}
`function` <- c(1:3,"advance","R")
print(`function`)

`if` <- 1e+7
print(`if`)
```
R will automatically convert non–syntactic names

